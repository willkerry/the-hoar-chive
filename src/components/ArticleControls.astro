<div class="mb-6 flex gap-2">
  <button
    id="shuffle-button"
    type="button"
    class="border-2 uppercase font-medium tracking-widest text-xs border-gray-300 text-gray-600 rounded px-2 p-1.5 hover:border-black hover:text-black"
  >
    Shuffle
  </button>
  <button
    id="clear-button"
    type="button"
    class="border-2 uppercase font-medium tracking-widest text-xs border-red-300 text-red-600 rounded px-2 p-1.5 hover:border-black hover:text-black hidden"
  >
    Clear
  </button>
</div>

<script>
  const shuffleButton = document.getElementById("shuffle-button");
  const clearButton = document.getElementById("clear-button");
  const container = document.getElementsByTagName("main")[0];

  const posts = document.querySelectorAll("article");

  shuffleButton?.addEventListener("click", () => {
    for (const post of posts) {
      post.remove();
    }

    const shuffled = Array.from(posts).sort(() => Math.random() - 0.5);

    localStorage.setItem(
      "shuffled-ids",
      JSON.stringify(shuffled.map((post) => post.id))
    );

    for (const post of shuffled) {
      container?.insertBefore(post, container?.lastElementChild || null);
    }

    clearButton?.classList.remove("hidden");
  });

  clearButton?.addEventListener("click", () => {
    localStorage.removeItem("shuffled-ids");

    for (const post of posts) {
      post.remove();
    }

    const sorted = Array.from(posts).sort((a, b) => {
      const dateA = a.getAttribute("data-date") || "";
      const dateB = b.getAttribute("data-date") || "";
      if (dateA > dateB) return -1;
      if (dateA < dateB) return 1;
      return 0;
    });

    for (const post of sorted) {
      container?.insertBefore(post, container?.lastElementChild || null);
    }

    clearButton?.classList.add("hidden");
  });

  if (localStorage.getItem("shuffled-ids")) {
    clearButton?.classList.remove("hidden");

    const shuffledIds = JSON.parse(
      localStorage.getItem("shuffled-ids") || "[]"
    );

    const orderMap = new Map<string, number>(
      shuffledIds.map((id: string, index: number) => [id, index])
    );

    const shuffled = Array.from(posts).sort((a, b) => {
      const orderA = orderMap.get(a.id) ?? Number.MAX_SAFE_INTEGER;
      const orderB = orderMap.get(b.id) ?? Number.MAX_SAFE_INTEGER;
      return orderA - orderB;
    });

    for (const post of posts) {
      post.remove();
    }

    for (const post of shuffled) {
      container?.insertBefore(post, container?.lastElementChild || null);
    }
  }
</script>
